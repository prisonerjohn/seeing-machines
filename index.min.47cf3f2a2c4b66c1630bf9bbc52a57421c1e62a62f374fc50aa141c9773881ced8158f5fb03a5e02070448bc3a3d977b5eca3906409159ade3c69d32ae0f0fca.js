var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(e){const s=suggestions.classList.contains("d-none");if(s)return;const t=[...suggestions.querySelectorAll("a")];if(t.length===0)return;const n=t.indexOf(document.activeElement);if(e.key==="ArrowUp"){e.preventDefault();const s=n>0?n-1:0;t[s].focus()}else if(e.key==="ArrowDown"){e.preventDefault();const s=n+1<t.length?n+1:n;t[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/docs/class-0/",title:"Prologue",description:"Class 0",content:""}),e.add({id:1,href:"/docs/class-0/getting-started/",title:"Getting Started",description:`Discord Server # We will use Discord to communicate between class meetings. Please use this forum to post any questions or comments.
Join the class Discord server using the invitation link: https://discord.gg/NGMGbjK8w3. Note that we are using the same server as previous classes, so you may see some activity there from before. IDE Installation # Unlike other tools like Processing or TouchDesigner, openFrameworks does not come with its own development environment (IDE).`,content:`Discord Server # We will use Discord to communicate between class meetings. Please use this forum to post any questions or comments.
Join the class Discord server using the invitation link: https://discord.gg/NGMGbjK8w3. Note that we are using the same server as previous classes, so you may see some activity there from before. IDE Installation # Unlike other tools like Processing or TouchDesigner, openFrameworks does not come with its own development environment (IDE). You will need to install this separately.
IDEs can be large downloads and take up a lot of disk space, so its best to install these before the start of class.
macOS # You will use Xcode on macOS.
Download Xcode directly from the Mac App Store. Wait for the download and installation to complete. Open a Terminal window (You can find the Terminal in /Applications/Utilities/Terminal.app). Install the command line tools by typing in the command (then hit ENTER!) xcode-select --install Windows # You will use Visual Studio on Windows.
Download Visual Studio Community 2022 from the official site. Open the Visual Studio Installer and select the Desktop environment with C++ workload. Press Install or Modify in the bottom right corner of the window. Wait for the download and installation to complete. `}),e.add({id:2,href:"/docs/class-1/",title:"Class 1",description:"Class 1",content:""}),e.add({id:3,href:"/docs/class-1/foreword/",title:"Foreword",description:`Introductions # A bit about me:
Beta Movement A bit about you:
What did you do before ITP? Tell me about your programming experience. What are you hoping to get out of the class? Senses # What is a sense? # A capacity that allows organisms to perceive the conditions or properties of things, either around them or internally.
Human senses # We have traditionally only considered five human senses:`,content:`Introductions # A bit about me:
Beta Movement A bit about you:
What did you do before ITP? Tell me about your programming experience. What are you hoping to get out of the class? Senses # What is a sense? # A capacity that allows organisms to perceive the conditions or properties of things, either around them or internally.
Human senses # We have traditionally only considered five human senses:
Sight Hearing Smell Taste Touch Which of these would you say we use more predominantly? Neurologist Dr. Wilder Penfield conceived the Sensory Homuncilus, a physical representation of how the human body would look if the various body parts were sized in proportion to the cortical area used for their specific sensory functions.
A 2-D cortical sensory homunculus 3-D interpretation by Sharon Price James This is a simplification, but demonstrates that touch is the most predominant sense, followed by taste, hearing, smell, and finally sight.
We also have many other senses, which we use in our daily life but are less obvious:
Equilibrium Temperature Pain Thirst and hunger Direction Time Etc. Modeling machines # In order to get machines to understand their environment, we tend to outfit them with sensors that are similar to our own senses.
What are some sensors that we use on computers? Sight Digital camera IR receiver Hearing Microphone Touch Trackpad Pressure sensor Keyboard Equilibrium Gyroscope Direction Magnetometer Compass You\u0026rsquo;ve probably used some of these in your previous classes and projects.
The right tool for the job # The focus of Seeing Machines will be to use sensors with computers (rather than microcontrollers), for the purpose of building successful interactive experiences.
The devices we will use will have SDKs (software development kits) and interfaces for many platforms and languages. This is great as it allows us to use something we are already familiar with, however some tools are better suited than others for specific tasks. For example, Python is great at text and language processing, Max is best at sound analysis, and Unity is ideal to get up and running with VR.
A lot of these platforms use very similar paradigms, and the difficulty of moving from one to the other tends to be more about getting familiar with a new environment and different coding syntax than anything else.
The majority of the programming for this class will be done in openFrameworks (OF) and we will sometimes detour to another platform when it makes sense. While C++ can be daunting, it is a very high performance language that is widely used, and OF takes a lot of the initial hurdles away!
About halfway through the semester, we will have a lecture on communication, where we will learn various methods for different pieces of software and hardware \u0026ldquo;talk\u0026rdquo; to each other.
`}),e.add({id:4,href:"/docs/class-1/intro-to-of/",title:"Intro to OF",description:`What is openFrameworks? # openFrameworks (OF) is an open source cross-platform C++ toolkit designed to assist the creative process, by providing a simple and intuitive framework for experimentation.
OF is distributed under the MIT License, which gives everyone the freedoms to use openFrameworks in any context:
Commercial or non-commercial. Public or private. Open or closed source. What is C++? # A programming language. General purpose. Fairly low level, but can be programmed in a high level way.`,content:`What is openFrameworks? # openFrameworks (OF) is an open source cross-platform C++ toolkit designed to assist the creative process, by providing a simple and intuitive framework for experimentation.
OF is distributed under the MIT License, which gives everyone the freedoms to use openFrameworks in any context:
Commercial or non-commercial. Public or private. Open or closed source. What is C++? # A programming language. General purpose. Fairly low level, but can be programmed in a high level way. Compiled (it\u0026rsquo;s really fast). Widely used. Libraries # OF is written in C++. It makes it easier to interface with the many libraries that have been written in C and C++ without needing to rely on a wrapper for another language.
Libraries are collections of code that do something common or useful. For example:
OpenGL for drawing graphics. FreeType for loading and rendering fonts. FreeImage for loading image files. AVFoundation for playing videos. OF is the glue that ensures these libraries work together well.
It is a consistent and intuitive interface to these libraries.
For example, loading a font using FreeType directly would look something like this:
FT_New_Face(...); FT_Set_Char_Size(...); And with OF would look like this:
ofTrueTypeFont font; font.load(...); Loading an image using FreeImage directly:
FreeImage_OpenMemory(...); FreeImage_LoadFromMemory(...); FreeImage_GetBits(...); And with OF:
ofImage img; img.load(...); Open Source # OF is distributed as source code.
An open book, giving the curious a good starting point for learning about C++ library wrangling. A work in progress, keeping the code visible allowing for easier changes and feedback. An invitation for users to modify the toolkit to their taste or needs. Over 70 people have contributed to the core, and there are more than 1500 addons extending the base functionality of the toolkit.
Comparisons with Processing # openFrameworks and Processing have many similarities. In fact, OF is inspired by Processing!
When possible, openFrameworks tries to maintain parity with Processing, making moving from one to the other very easy. Compare the following code snippets:
void setup() { frameRate(60); background(0); } void draw() { fill(255, 0, 0); rect(10, 10, 50, 50); } void ofApp::setup() { ofSetFrameRate(60); ofBackground(0); } void ofApp::draw() { ofSetColor(255, 0, 0); ofDrawRectangle(10, 10, 50, 50); } ✌️ What does the :: mean?
:: is a scope resolution operator in C++. It is used to show the relationship between methods (functions) and classes. Methods can be defined anywhere in the source code, so we need a way to know where they belong when they are defined.
For example, void ofApp::draw() means \u0026ldquo;define the draw() function that belongs to the ofApp class\u0026rdquo;.
Getting Started # Installation # Download the openFrameworks package for your environment.
Follow the corresponding setup guide.
Unlike Processing, OF does not come with its own development environment (IDE). Instructions to set this up will be included in the guide. You will use Xcode for development under macOS and Visual Studio for development under Windows. Please refer to the Getting Started page for details. ⚠️ If you encounter a build system error when compiling for Xcode, try changing the Build System dropdown in the Project Settings.
Project Generation # To create a new project, you are strongly encouraged to use the OF Project Generator.
This application can be found in your downloaded package, under /path/to/OF/projectGenerator-XXX. The Project Generator will take care of adding any files and libraries needed to build your applications. The first time you run the Project Generator, you\u0026rsquo;ll be asked to set the path to the openFrameworks installation on your system.
You can then create a project by giving it a name and a save path. It is recommended to save your projects under path/to/OF/apps/seeing-machines/.
Click Generate to create the project files. Once that is complete, you can click on the Open in IDE button to open the project.
Anatomy of an OF Project # A basic OF project will include three files you can edit.
main.cpp contains the main() function. This is the entry point to the program.
The main function is where the application window is set. You can set up the window dimensions, renderer used, graphics quality, additional windows, etc.
#include \u0026quot;ofMain.h\u0026quot; #include \u0026quot;ofApp.h\u0026quot; int main() { ofSetupOpenGL(1920, 1080, OF_WINDOW); ofRunApp(new ofApp()); } ✌️ What does #include mean?
The # symbol is used to indicate a compiler directive. When a file has the line #include \u0026quot;someFile.h\u0026quot;, this tells the compiler to insert the code from that specific file into the source code.
If we want to use any classes or functions defined in other files, we need to #include these in our code so that the compiler knows where to look for them.
The other two files define the ofApp class. You can think of ofApp as the main class that holds and runs all the components belonging to your program, kind of like a sketch in Processing.
In C++, classes are defined in two parts: the header (declaration) and the implementation (definition). The header defines what a class is, and the implementation defines how a class operates.
The header will usually have extension .h or .hpp. This is where all variables and methods in the class are listed. You can think of this as a table of contents for the class. When classes link to each other using #include, they will only refer to the header class as they only need to \u0026ldquo;know\u0026rdquo; what variables and methods are available to them, but not how these are implemented. This reduces dependencies and in turn compilation times.
#pragma once #include \u0026quot;ofMain.h\u0026quot; class ofApp : public ofBaseApp { public: void setup(); void update(); void draw(); void keyPressed(int key); void keyReleased(int key); void mouseMoved(int x, int y); void mouseDragged(int x, int y, int button); void mousePressed(int x, int y, int button); void mouseReleased(int x, int y, int button); void mouseEntered(int x, int y); void mouseExited(int x, int y); void windowResized(int w, int h); void dragEvent(ofDragInfo dragInfo); void gotMessage(ofMessage msg); }; ✌️ What does #pragma once mean?
We now know #include will insert the contents of another file into our code, however we only want to include every piece of code once in our application. You will notice many files will have #include \u0026quot;ofMain.h\u0026quot; at the top, but that code cannot be inserted over and over, as this will give us duplicate classes and functions with the same name.
This is where the #pragma once directive comes in. It tells the compiler to only include the contents of the file once, no matter how many times it is referenced with #include.
As a general rule, you should always start your header files with the line #pragma once.
The implementation will have extension .cpp. This is where all the methods declared in the header are defined.
#include \u0026quot;ofApp.h\u0026quot; void ofApp::setup() { // Called once at app startup. } void ofApp::update() { // Called at the start of every frame. } void ofApp::draw() { // Called every frame after update. } void ofApp::keyPressed(int key) { // Called when a key is pressed. } void ofApp::keyReleased(int key) { // Called when a key is released. } void ofApp::mouseMoved(int x, int y) { // Called when the mouse is moved and no buttons are pressed. } void ofApp::mouseDragged(int x, int y, int button) { // Called when the mouse is moved while a button is pressed down. } void ofApp::mousePressed(int x, int y, int button) { // Called when a mouse button is pressed. } void ofApp::mouseReleased(int x, int y, int button) { // Called when a mouse button is released. } void ofApp::mouseEntered(int x, int y) { // Called when the mouse cursor enters the application window. } void ofApp::mouseExited(int x, int y) { // Called when the mouse cursor exits the application window. } void ofApp::windowResized(int w, int h) { // Called when the application window is resized. } void ofApp::gotMessage(ofMessage msg) { // I have no idea :/ } void ofApp::dragEvent(ofDragInfo dragInfo) { // Called when a file or set of files are dragged onto the application window. } Note that the placeholder ofApp already has stubs for common methods you may want to use. You can keep these in or delete them, but if you get rid of them you\u0026rsquo;ll need to do so in both the header and the implementation files.
Reference # OF ships with a multitude of examples in the path/to/OF/examples folder, and this is the best way to get familiar with the tool. Note that project files need to be created for these using the Project Generator before they can be built.
OF also has comprehensive documentation on its website, as well as an active user forum, which are other great places to get information.
If you are more of a visual learner, Lewis Lepton\u0026rsquo;s openFrameworks Tutorial Series on YouTube is an excellent resource.
`}),e.add({id:5,href:"/docs/class-2/",title:"Class 2",description:"Class 2",content:""}),e.add({id:6,href:"/docs/class-2/data-types/",title:"Data Types",description:`Let\u0026rsquo;s start with the basics and review data types in C++.
Main Primitives # int # 32 bits of data (usually but not always) represents a whole number between -2,147,483,648 and 2,147,483,647 int videoWidth = 1920; int videoHeight = 1080; int numVideoPixels = videoWidth * videoHeight; integers do not support decimal points ✌️ Integer division / and modulo % operators
Operations on integers return integers. This is particularly important to remember with division /.`,content:`Let\u0026rsquo;s start with the basics and review data types in C++.
Main Primitives # int # 32 bits of data (usually but not always) represents a whole number between -2,147,483,648 and 2,147,483,647 int videoWidth = 1920; int videoHeight = 1080; int numVideoPixels = videoWidth * videoHeight; integers do not support decimal points ✌️ Integer division / and modulo % operators
Operations on integers return integers. This is particularly important to remember with division /.
int numStudents = 17; int studentsPerTeam = 4; int numTeams = numStudents / studentsPerTeam; // 4 not 4.25! The modulo % operator is used on integers to get the remainder of a division.
int leftoverStudents = numStudents % studentsPerTeam; // 1 student without a team :( unsigned int # the unsigned (no +/- sign) version of int, only positive numbers represents 0 and positive whole numbers up to 4,294,967,295 char # 8 bits of data represents a whole number between -128 and 127 char numStudents = 17; char studentsPerTeam = 4; char numTeams = numStudents / studentsPerTeam; // 4 not 4.25! if we try to use a char to represent a larger number, we will end up with the wrong value but C++ will not flag an error! char videoWidth = 1920; // ? unsigned char # the unsigned (no +/- sign) version of char, only positive numbers represents 0 and positive whole numbers up to 255 often used to represent characters in a string, using the ASCII table for conversion unsigned char H = 72; unsigned char i = 'i'; cout \u0026lt;\u0026lt; H \u0026lt;\u0026lt; i \u0026lt;\u0026lt; endl; ✌️ What do cout and endl do?
cout is a command to send text output to the console. The \u0026lt;\u0026lt; (left shift) operator is used to send data to the output, and can be used multiple times to add more text to the output.
New lines are not automatically added. The endl command is used to send a new line. This will usually be found at the end of a cout line of code.
bool # 1 bit of data represents true or false, 0 or 1, \u0026ldquo;yes\u0026rdquo; or \u0026ldquo;no\u0026rdquo;, etc. we can use the keywords true and false to set a boolean value bool isTheSkyBlue = true; bool isThisBoring = false; we can also use numbers, where 0 evaluates to false and any other number evaluates to true bool numStudents = 17; // true if (numStudents) { cout \u0026lt;\u0026lt; \u0026quot;Class is in session!\u0026quot; \u0026lt;\u0026lt; endl; } ⚠️ Note that even though you can use numbers to represent a boolean, the bool data type only has enough memory to represent 0 or 1.
bool numStudents = 17; cout \u0026lt;\u0026lt; \u0026quot;There are \u0026quot; \u0026lt;\u0026lt; numStudents \u0026lt;\u0026lt; \u0026quot; students in class\u0026quot; \u0026lt;\u0026lt; endl; // 1 float # 32 bits of data represents a decimal number with ~7 significant digits float is short for \u0026ldquo;floating point\u0026rdquo;, which means that the decimal point can move positions (e.g. we can represent 1.23456 and 123.456 with the same amount of memory) float videoWidth = 1920; float videoHeight = 1080; float aspectRatio = videoWidth / videoHeight; // 1.777778 Additional Primitives # The following primitive types are not used as often but are still useful if we need to optimize and use less memory, or increase precision and use more memory.
short and unsigned short # 16 bits of data represents whole numbers between -32,768 and 32,767 (signed) or 0 and 65,535 (unsigned) long and unsigned long # 64 bits of data represents whole numbers between -9M and 9M (signed) or 0 and 18M (unsigned) double # 64 bits of data represents floating point numbers with ~15 significant digits Strings # Like in most programming languages, strings (sequences of characters) are a complex class type, but they have special rules and optimizations applied to them since they are used very often.
string name = \u0026quot;John Doe\u0026quot;; string objects have a variety of methods (class functions) we can use to access their properties.
string name; if (name.empty()) { cout \u0026lt;\u0026lt; \u0026quot;No name has been set, using default...\u0026quot; \u0026lt;\u0026lt; endl; name = \u0026quot;John Doe\u0026quot;; } cout \u0026lt;\u0026lt; \u0026quot;Hello, \u0026quot; \u0026lt;\u0026lt; name \u0026lt;\u0026lt; endl; We can iterate through a string to get the characters it is made up of.
string name = \u0026quot;John Doe\u0026quot;; cout \u0026lt;\u0026lt; \u0026quot;Your name is: \u0026quot;; for (int i = 0; i \u0026lt; name.size(); i++) { cout \u0026lt;\u0026lt; name.at(i); } cout \u0026lt;\u0026lt; endl; Concatenation # string objects can be concatenated using the + operator.
string first = \u0026quot;John\u0026quot;; string last = \u0026quot;Doe\u0026quot;; string name = first + \u0026quot; \u0026quot; + last; This also sometimes works with non-string types, but not always as the compiler might not know how to use the + operator.
int videoWidth = 1920; int videoHeight = 1080; string resolution = videoWidth + \u0026quot;x\u0026quot; + videoHeight; // OK? float videoWidthf = 1920; float videoHeightf = 1080; string resolutionf = videoWidthf + \u0026quot;x\u0026quot; + videoHeightf; // ERROR! OF has ofToString() helper functions, which can be used to convert other variable types into string.
int videoWidth = 1920; int videoHeight = 1080; string resolution = ofToString(videoWidth) + \u0026quot;x\u0026quot; + ofToString(videoHeight); float videoWidthf = 1920; float videoHeightf = 1080; string resolutionf = ofToString(videoWidthf, 1) + \u0026quot;x\u0026quot; + ofToString(videoHeightf, 1); `}),e.add({id:7,href:"/docs/assignments/",title:"Assignments",description:"Assignments",content:""}),e.add({id:8,href:"/docs/",title:"Docs",description:"Seeing Machines Docs",content:""}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()