<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Class 6 on</title><link>https://seeingmachines.betamovement.net/docs/class-6/</link><description>Recent content in Class 6 on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 27 Oct 2022 19:16:21 -0400</lastBuildDate><atom:link href="https://seeingmachines.betamovement.net/docs/class-6/index.xml" rel="self" type="application/rss+xml"/><item><title>Pointers</title><link>https://seeingmachines.betamovement.net/docs/class-6/pointers/</link><pubDate>Sun, 23 Oct 2022 14:19:26 -0400</pubDate><guid>https://seeingmachines.betamovement.net/docs/class-6/pointers/</guid><description>So far in this course, every time we have wanted to reference some data, we have done so directly using type variables.
ofImage dogImg; dogImg is a variable that can hold an ofImage. The variable is referencing the object itself, and we can access the variables and functions inside of it using the dot . operator.
dogImg.load(&amp;quot;dog-grass.jpg&amp;quot;); dogImg.draw(0, 0); Operators # In C++, we can also reference an object using a pointer variable.</description></item><item><title>Depth Images</title><link>https://seeingmachines.betamovement.net/docs/class-6/depth-images/</link><pubDate>Sun, 23 Oct 2022 14:19:40 -0400</pubDate><guid>https://seeingmachines.betamovement.net/docs/class-6/depth-images/</guid><description>Depth Grabbers # While depth sensors come in a variety of shapes, sizes, and technologies, the method to interface with them is usually pretty similar. Just like color cameras, depth cameras deliver images at the requested framerate. These images come in as arrays of pixels, which can then be manipulated and uploaded to a texture for rendering.
As these are specialty devices, we cannot use an ofVideoGrabber to retrieve data from them.</description></item></channel></rss>