<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Class 1 on</title><link>https://seeingmachines.betamovement.net/docs/class-1/</link><description>Recent content in Class 1 on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sun, 18 Sep 2022 13:41:13 -0400</lastBuildDate><atom:link href="https://seeingmachines.betamovement.net/docs/class-1/index.xml" rel="self" type="application/rss+xml"/><item><title>Variables and Arrays</title><link>https://seeingmachines.betamovement.net/docs/class-1/variables-and-arrays/</link><pubDate>Sun, 18 Sep 2022 13:41:13 -0400</pubDate><guid>https://seeingmachines.betamovement.net/docs/class-1/variables-and-arrays/</guid><description>Data Types # Let&amp;rsquo;s start with the basics and review data types in C++.
Main Primitives # int # 32 bits of data (usually but not always) represents a whole number between -2,147,483,648 and 2,147,483,647 int videoWidth = 1920; int videoHeight = 1080; int numVideoPixels = videoWidth * videoHeight; integers do not support decimal points ✌️ Integer division / and modulo % operators
Operations on integers return integers. This is particularly important to remember with division /.</description></item><item><title>Images and Video</title><link>https://seeingmachines.betamovement.net/docs/class-1/images-and-video/</link><pubDate>Sun, 18 Sep 2022 13:42:06 -0400</pubDate><guid>https://seeingmachines.betamovement.net/docs/class-1/images-and-video/</guid><description>File Formats # Digital images come in a variety of formats, each with their own properties.
Vector Graphics # Vector formats define a set of points and instructions on how to draw them. The instructions are run by a program to raster the image in order to view it.
Some of the more common vector formats are SVG, EPS, PDF, and AI.
If we open the following SVG file in a text editor, we will notice that it is fairly easy to read the format.</description></item></channel></rss>